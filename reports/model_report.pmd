% LIGHT GBM MODEL REPORT
% Kenechukwu Agbo
% 15th December 2019

## Introduction

Sendyproject was done on the dataset produced by sendy on [zindi](https://zindi.com)
as one of its competitions. The competition aimed at predicting how long it would
take for an order to move from the time of pickup to the time of delivery.
The model(s) was built using Light GBM as its boosting algorithm. The model
building was done in four parts, with each model depicting one platform type. We
would be analyzing each of these four types.
This report is to understand how the models make their predictions.

Let us start with simple feature importances. LGBM provides this functunality out
of the box

```python
import pickle
import matplotlib.pyplot as plt
import lightgbm as lgb

with open('../data/models/lgb_models.pkl', 'rb') as modelfile:
    lgb_model = pickle.load(modelfile)

model1, model2, model3, model4 = lgb_model[0]
```

For model 1:
```python
lgb.plot_importance(model1)
```
We can see from the above chat that "dist_diff" (the difference between the displacement and
distance of a location. It was used to make up for curvature which was not given in the data)
is the most important, followed by distance, then displacement. Three features out of the top
5 represent "how far" is the pickup point from the delivery point. This seems logical because
we know from classical physics that distance and time are related.
We shall do the same for the next.

For model 2:
```python
lgb.plot_importance(model2)
```
For model 3:
```python
lgb.plot_importance(model3)
```
For model 4:
```python
lgb.plot_importance(model4)
```

Since all the models say the same thing, we shall go ahead to analyze these distance and
displacement features for only model1

```python
import numpy as np
import pandas as pd
from pdpbox import pdp

data = pd.read_csv('../data/selected_features/df_train.csv')
data = data.drop(['Order No',
                  'Time from Pickup to Arrival',
                  'Unnamed: 0',
                  'Platform Type'], axis='columns')
category_cols = ['Personal or Business', 'Pickup - Day of Month']
for i in category_cols:
    data[i] = data[i].astype('category')

feature_names = [i for i in data.columns]

pdp_dist = pdp.pdp_isolate(model=model1,
                            dataset=data,
                            model_features=feature_names,
                            feature='Distance (KM)')
pdp.pdp_plot(pdp_dist, 'Distance (KM)')
plt.show()
```

We can see from the partial dependence plot that when the distance between the
pickup and delivery point increases from 0 - 5 km, the time it takes to deliver
the order also increases, however from 5km - 9km, the time is similar. Then above
that, it starts to increase again. This could suggest that the traffic congestion
in the area of 5km - 9km, is little or does not exist at all, thereby allowing
free movement of the riders which in turn does not really increase time to delivery.

Now to plot the shap summary of model
```python
import shap

explainer = shap.TreeExplainer(model1)
shap_values = explainer.shap_values(data)
shap.summary_plot(shap_values, data)
```

From the shap summary plot, we have a bird eye view of feature importance
and what drives it.
Looking at the distance feature, we can see that when it is low (blue) it
reduces the prediction time by more than 400, but when it is high, it
increases the prediction by more than 800. The feature "Pickup - Day of Month)
moves in the opposite direction.

Plotting the shap values to see the contribution of each feature to the model
```python
def plot_shap_values(model, row):
    explainer_ = shap.TreeExplainer(model)
    shap_vals = explainer_.shap_values(row)
    shap.initjs()
    return shap.force_plot(explainer_.expected_value, shap_vals[0], row)

plot_shap_values(model1, data.iloc[[0]])
```